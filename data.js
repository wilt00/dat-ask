'use strict'
//const mongo = require('mongodb-bluebird');
const Promise = require('bluebird');
//const mongo = Promise.promisifyAll(require('mongodb'));
const mongo = require('mongodb-bluebird');
const mongoUrl = process.env.MONGO_URL;
const ObjectId = require('mongodb').ObjectID;
const assert = require('assert');
const util = require('util');

function NoMoreQuestionsError(message) {
  this.message = message;
  this.name = "NoMoreQuestionsError";
  Error.captureStackTrace(this, NoMoreQuestionsError);
}

NoMoreQuestionsError.prototype = Object.create(Error.prototype);
NoMoreQuestionsError.prototype.constructor = NoMoreQuestionsError;

exports.NoMoreQuestionsError = NoMoreQuestionsError;

///
// Database Helpers
///

/*
Question Schema:
  _id: ObjectId  -- generated by Mongo
  type: string
  subject: string
  question: string
  questionImg: string    (url)
  questionImgId: string    -- provided after FB upload
  answer: string
  alts: [string]
  explanation: [string]
  explanationImgs: [string]  (urls)
  
User Schema:
  _id: string    -- direct from Facebook
  questions_passed: [ObjectId]
  questions_failed: [ObjectId]
  last_question: ObjectId
*/


exports.getUser = function (userId) {
  return mongo.connect(mongoUrl).then((db) => {
    const users = db.collection('users');
    return users.findOne({_id: userId}).then((user) => {
      console.log("Data: User: " + user);
      if (user === null) {
        return users.insert({ _id: userId, questions_passed: [], questions_failed: [] });
      } else {
        return user;
      }
    })
  })
};


exports.logQuestion = function (userId, questionIdString, pass) {
  const questionId = new ObjectId(questionIdString);
  return mongo.connect(mongoUrl)
    .then((db) => {
      const users = db.collection('users');
      const fieldName = (pass) ? "questions_passed" : "questions_failed";
      const pushObject = new Object();
      pushObject[fieldName] = questionId;
      return users.update({_id: userId}, {$push: pushObject, $set: {last_question: questionId}});
    });
};


exports.insertQuestion = function (question) {
  //TODO: Make sure question isn't a duplicate
  return mongo.connect(mongoUrl)
    .then((db) => {
      const questions = db.collection('questions');
      return questions.insert(question);
    });
}


exports.getQuestion = function (questionIdString) {
  const questionId = new ObjectId(questionIdString);
  return mongo.connect(mongoUrl)
    .then((db) => {
      const questions = db.collection('questions');
      return questions.findOne({_id: questionId});
    }).then((question) => {
      if (question === null) {
        return Promise.reject("Question with given ID not found");
      } else {
        return question;
      }
    });
}


exports.getNextQuestion = function (userId) {  
  return mongo.connect(mongoUrl).then((db) => {
    return exports.getUser(userId).then((user) => {  
      console.log("Getting question for user: " + user._id);
      const questions = db.collection('questions');
      const query = {
        _id: {
          $nin: user.questions_passed,
          $ne: user.last_question
        }
      };
      return questions.findOne(query);
    }).then((nextQ) => {
      console.log("Returning question: \n" + util.inspect(nextQ, {showHidden: false, depth: null}))
      if (nextQ === null) {
        return Promise.reject(NoMoreQuestionsError("No questions found"));
      }
      return nextQ;
    });
  });
}
